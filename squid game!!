import random
import time

class Player:
    def __init__(self, id):
        self.id = f'{id:03}'
        self.alive = True

class Game:
    def __init__(self, num_players):
        self.players = [Player(i) for i in range(1, num_players + 1)]
        self.current_game = ""
        
    def get_alive_players(self):
        return [player for player in self.players if player.alive]

    def print_alive_players(self):
        alive_players = self.get_alive_players()
        player_ids = ', '.join([p.id for p in alive_players])
        print(f'Players still alive: {player_ids}')
    
    def red_light_green_light(self):
        self.current_game = "Red Light, Green Light"
        print("\nGame 1: Red Light, Green Light")
        for player in self.get_alive_players():
            if random.choice([True, False, False, False]):  # 25% probability of getting caught
                player.alive = False
        self.print_alive_players()
    
    def dalgona(self):
        self.current_game = "Dalgona"
        print("\nGame 2: Dalgona")
        for player in self.get_alive_players():
            if random.choice([True, False]):  # 50% probability of success
                player.alive = False
        self.print_alive_players()
    
    def six_legged_pentathlon(self):
        self.current_game = "Six-Legged Pentathlon"
        print("\nGame 2: Six-Legged Pentathlon")
        for player in self.get_alive_players():
            # 33% probability of success
            if random.choice([True, False, False]):
                player.alive = False
        self.print_alive_players()
    
    def mingle(self):
        self.current_game = "Mingle"
        print("\nGame 3: Mingle")
        print('Find a partner to continue. You found one and passed the game!')

    def tug_of_war(self):
        self.current_game = "Tug of War"
        print("\nGame 3: Tug of War")
        for player in self.get_alive_players():
            if random.choice([True, False]):  # 50% probability of success
                player.alive = False
        self.print_alive_players()
    
    def marbles(self):
        self.current_game = "Marbles"
        print("\nGame 4: Marbles")
        for player in self.get_alive_players():
            if random.choice([True, False]):  # 50% probability of success
                player.alive = False
        self.print_alive_players()
    
    def glass_bridge(self):
        self.current_game = "Glass Bridge"
        print("\nGame 5: Glass Bridge")
        for player in self.get_alive_players():
            if random.choice([True, False, False]):  # 33% probability of success
                player.alive = False
        self.print_alive_players()
    
    def squid_game(self):
        self.current_game = "Squid Game"
        print("\nGame 6: Squid Game")
        for player in self.get_alive_players():
            if random.choice([True, False]):  # 50% probability of success
                player.alive = False
        self.print_alive_players()
    
    def play_squid_game(self):
        self.red_light_green_light()
        if not self.get_alive_players():
            print("All players have been eliminated. Game Over.")
            return
        
        # Choosing between Dalgona and Six-Legged Pentathlon
        if random.choice([True, False]):
            self.dalgona()
        else:
            self.six_legged_pentathlon()
        if not self.get_alive_players():
            print("All players have been eliminated. Game Over.")
            return
        
        # Choosing between Mingle and Tug of War
        if random.choice([True, False]):
            self.mingle()
        else:
            self.tug_of_war()
        if not self.get_alive_players():
            print("All players have been eliminated. Game Over.")
            return
        
        self.marbles()
        if not self.get_alive_players():
            print("All players have been eliminated. Game Over.")
            return
        
        self.glass_bridge()
        if not self.get_alive_players():
            print("All players have been eliminated. Game Over.")
            return
        
        self.squid_game()
        if not self.get_alive_players():
            print("All players have been eliminated. Game Over.")
